{"ast":null,"code":"var _jsxFileName = \"/Users/daryaandcodestory/Desktop/react/eventRouter/frontend/src/pages/EventPage.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json, defer, Await } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(Await, {\n    resolve: events,\n    children: loadEvenys => /*#__PURE__*/_jsxDEV(EventsList, {\n      events: loadEvenys\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 22\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 10\n  }, this);\n}\n_s(EventsPage, \"22Av1LduzrZxSsk8kXUUCix36lQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvenys() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    // //return {isError: true, message: 'error'};\n    // throw new Response(JSON.stringify({message: 'Could not fetch events.'}), {\n    //   status: 500,\n    return json({\n      message: 'Could not fetch events.'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport function loader() {\n  return defer({\n    events: loadEvenys()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","json","defer","Await","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","events","resolve","children","loadEvenys","fileName","_jsxFileName","lineNumber","columnNumber","_c","response","fetch","ok","message","status","loader","$RefreshReg$"],"sources":["/Users/daryaandcodestory/Desktop/react/eventRouter/frontend/src/pages/EventPage.js"],"sourcesContent":["import { useLoaderData, json, defer, Await } from 'react-router-dom';\n\nimport EventsList from '../components/EventsList';\n\nfunction EventsPage() {\n  const {events} = useLoaderData();\n\n  return <Await resolve={events}>\n    {(loadEvenys) => <EventsList events={loadEvenys}/> }\n  </Await>;\n}\n\nexport default EventsPage;\n\nasync function loadEvenys(){\n  const response = await fetch('http://localhost:8080/events');\n\n    if (!response.ok) {\n      // //return {isError: true, message: 'error'};\n      // throw new Response(JSON.stringify({message: 'Could not fetch events.'}), {\n      //   status: 500,\n      return json(\n        {message: 'Could not fetch events.'},\n        {status: 500,});\n    } else {\n      return response;\n    }\n}\n\nexport function loader(){\n  return defer({\n    events: loadEvenys()\n  })\n  }"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,QAAQ,kBAAkB;AAEpE,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM;IAACC;EAAM,CAAC,GAAGT,aAAa,CAAC,CAAC;EAEhC,oBAAOM,OAAA,CAACH,KAAK;IAACO,OAAO,EAAED,MAAO;IAAAE,QAAA,EAC1BC,UAAU,iBAAKN,OAAA,CAACF,UAAU;MAACK,MAAM,EAAEG;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7C,CAAC;AACV;AAACR,EAAA,CANQD,UAAU;EAAA,QACAP,aAAa;AAAA;AAAAiB,EAAA,GADvBV,UAAU;AAQnB,eAAeA,UAAU;AAEzB,eAAeK,UAAUA,CAAA,EAAE;EACzB,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE1D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA;IACA,OAAOnB,IAAI,CACT;MAACoB,OAAO,EAAE;IAAyB,CAAC,EACpC;MAACC,MAAM,EAAE;IAAI,CAAC,CAAC;EACnB,CAAC,MAAM;IACL,OAAOJ,QAAQ;EACjB;AACJ;AAEA,OAAO,SAASK,MAAMA,CAAA,EAAE;EACtB,OAAOrB,KAAK,CAAC;IACXO,MAAM,EAAEG,UAAU,CAAC;EACrB,CAAC,CAAC;AACF;AAAC,IAAAK,EAAA;AAAAO,YAAA,CAAAP,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/daryaandcodestory/Desktop/react/eventRouter/frontend/src/pages/EventPage.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n\n  // if (data.isError){\n  //   return <p>{data.message}</p>\n  // }\n  const events = data.events;\n  return /*#__PURE__*/_jsxDEV(EventsList, {\n    events: events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 10\n  }, this);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvenys() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    // //return {isError: true, message: 'error'};\n    // throw new Response(JSON.stringify({message: 'Could not fetch events.'}), {\n    //   status: 500,\n    return json({\n      message: 'Could not fetch events.'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport async function loader() {}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","json","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","data","events","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvenys","response","fetch","ok","message","status","loader","$RefreshReg$"],"sources":["/Users/daryaandcodestory/Desktop/react/eventRouter/frontend/src/pages/EventPage.js"],"sourcesContent":["import { useLoaderData, json } from 'react-router-dom';\n\nimport EventsList from '../components/EventsList';\n\nfunction EventsPage() {\n  const data = useLoaderData();\n\n  // if (data.isError){\n  //   return <p>{data.message}</p>\n  // }\n  const events = data.events;\n\n  return <EventsList events={events}/>;\n}\n\nexport default EventsPage;\n\nasync function loadEvenys(){\n  const response = await fetch('http://localhost:8080/events');\n\n    if (!response.ok) {\n      // //return {isError: true, message: 'error'};\n      // throw new Response(JSON.stringify({message: 'Could not fetch events.'}), {\n      //   status: 500,\n      return json(\n        {message: 'Could not fetch events.'},\n        {status: 500,});\n    } else {\n      return response;\n    }\n}\n\nexport async function loader(){\n\n  }"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,IAAI,QAAQ,kBAAkB;AAEtD,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAMC,IAAI,GAAGP,aAAa,CAAC,CAAC;;EAE5B;EACA;EACA;EACA,MAAMQ,MAAM,GAAGD,IAAI,CAACC,MAAM;EAE1B,oBAAOJ,OAAA,CAACF,UAAU;IAACM,MAAM,EAAEA;EAAO;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAC,CAAC;AACtC;AAACN,EAAA,CATQD,UAAU;EAAA,QACJL,aAAa;AAAA;AAAAa,EAAA,GADnBR,UAAU;AAWnB,eAAeA,UAAU;AAEzB,eAAeS,UAAUA,CAAA,EAAE;EACzB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE1D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA;IACA,OAAOhB,IAAI,CACT;MAACiB,OAAO,EAAE;IAAyB,CAAC,EACpC;MAACC,MAAM,EAAE;IAAI,CAAC,CAAC;EACnB,CAAC,MAAM;IACL,OAAOJ,QAAQ;EACjB;AACJ;AAEA,OAAO,eAAeK,MAAMA,CAAA,EAAE,CAE5B;AAAC,IAAAP,EAAA;AAAAQ,YAAA,CAAAR,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}